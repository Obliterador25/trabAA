public class Algoritmos extends JFrame {

	private JPanel contentPane;
	JRadioButton rdbtnCutRod, rdbtnGreedyActivitySelection,rdbtnBottomUpCut,rdbtnMemoizedCutRod;
	Path path;
	File file;
	private JTextField tamanho;
	JTextArea texto;
	int[] vetor, vetorF, aux, auxI;
	int n;
	String var = "";
	JTextArea resultado;
	

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Algoritmos frame = new Algoritmos();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public Algoritmos() {
		setTitle("T R A B S O N");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		
		JLabel lblAnliseDeAlgoritmos = new JLabel("Análise de Algoritmos");
		lblAnliseDeAlgoritmos.setFont(new Font("Tahoma", Font.BOLD, 20));
		lblAnliseDeAlgoritmos.setBounds(106, 11, 225, 30);
		contentPane.add(lblAnliseDeAlgoritmos);
		
		JLabel lblTamanho = new JLabel("Tamanho");
		lblTamanho.setBounds(348, 48, 64, 14);
		contentPane.add(lblTamanho);
		
		tamanho = new JTextField();
		tamanho.setBounds(338, 62, 86, 20);
		contentPane.add(tamanho);
		tamanho.setColumns(10);
		
		rdbtnMemoizedCutRod = new JRadioButton("Memoized Cut Rod");
		rdbtnMemoizedCutRod.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				rdbtnCutRod.setSelected(false);
				rdbtnBottomUpCut.setSelected(false);
				rdbtnGreedyActivitySelection.setSelected(false);
			}
		});
		rdbtnMemoizedCutRod.setBounds(22, 48, 139, 23);
		contentPane.add(rdbtnMemoizedCutRod);
		
		rdbtnBottomUpCut = new JRadioButton("Bottom Up Cut Rod");
		rdbtnBottomUpCut.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				rdbtnMemoizedCutRod.setSelected(false);
				rdbtnCutRod.setSelected(false);
				rdbtnGreedyActivitySelection.setSelected(false);
			}
		});
		rdbtnBottomUpCut.setBounds(163, 48, 134, 23);
		contentPane.add(rdbtnBottomUpCut);
		
		rdbtnGreedyActivitySelection = new JRadioButton("Greedy Activity Selection");
		rdbtnGreedyActivitySelection.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				rdbtnMemoizedCutRod.setSelected(false);
				rdbtnCutRod.setSelected(false);
				rdbtnBottomUpCut.setSelected(false);
			}
		});
		rdbtnGreedyActivitySelection.setBounds(163, 77, 168, 23);
		contentPane.add(rdbtnGreedyActivitySelection);
		
		rdbtnCutRod = new JRadioButton("Cut Rod");
		rdbtnCutRod.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				rdbtnMemoizedCutRod.setSelected(false);
				rdbtnBottomUpCut.setSelected(false);
				rdbtnGreedyActivitySelection.setSelected(false);
			}
		});
		rdbtnCutRod.setBounds(22, 77, 109, 23);
		contentPane.add(rdbtnCutRod);
		
		texto = new JTextArea();
		texto.setBounds(10, 140, 212, 112);
		contentPane.add(texto);
		
		JScrollPane scroll = new JScrollPane(texto);
		scroll.setBounds(10, 140, 212, 112);
		contentPane.add(scroll);
		
		resultado = new JTextArea();
		resultado.setFont(new Font("Tahoma", Font.PLAIN, 40));
		resultado.setBounds(233, 140, 191, 111);
		contentPane.add(resultado);
		
		JButton botao = new JButton("Importar");
		botao.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser c = new JFileChooser();
				c.showOpenDialog(null);
				file = c.getSelectedFile();
				try{
					path = Paths.get(file.getAbsolutePath());
					String retorno = new String(Files.readAllBytes(path));
					texto.setText(retorno);
				} catch(Exception erro){
					JOptionPane.showMessageDialog(null, "Não conseguimos carregar seu arquivo");
				}
			}
		});
		botao.setBounds(64, 106, 89, 23);
		contentPane.add(botao);
		
		JButton botaoDois = new JButton("Gerar Resultado");
		botaoDois.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(rdbtnMemoizedCutRod.isSelected()){
					lerArquivo();
					String x = Integer.toString(memoizedCutRod(vetor, n));
					resultado.setText(x);

				}else if(rdbtnBottomUpCut.isSelected()){
					lerArquivo();
					String x = Integer.toString(bottonUpCutRod(vetor, n));
					resultado.setText(x);
			
				}else if(rdbtnCutRod.isSelected()){
					lerArquivo();
					String x = Integer.toString(cutRod(vetor, n));
					resultado.setText(x);

				}else if(rdbtnGreedyActivitySelection.isSelected()){
					lerArquivoDois();
					n = vetor.length;
					greedyActivitySelection(vetor, vetorF, n);
					
					
				}else{
					JOptionPane.showMessageDialog(null, "ERRO");
				}
				
			}
		});
		botaoDois.setBounds(266, 107, 128, 23);
		contentPane.add(botaoDois);

	}
